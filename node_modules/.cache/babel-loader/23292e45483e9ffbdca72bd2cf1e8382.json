{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Component, createElement } from 'react';\nimport { compare, normalizeHtml, replaceCaret } from './utils';\n/**\n * Based on https://github.com/lovasoa/react-contenteditable\n * A simple component for an html element with editable contents.\n */\n\nvar ContentEditable =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ContentEditable, _super);\n\n  function ContentEditable(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.previousValue = props.value;\n    _this.onChange = _this.onChange.bind(_this);\n    _this.setElementRef = _this.setElementRef.bind(_this);\n    return _this;\n  }\n\n  ContentEditable.prototype.shouldComponentUpdate = function (nextProps) {\n    var props = this.props;\n\n    if (!this.el) {\n      return true;\n    }\n\n    if (normalizeHtml(nextProps.value) !== normalizeHtml(this.el.innerHTML)) {\n      return true;\n    }\n\n    return !compare(props, nextProps, ['disabled', 'tagName', 'className']);\n  };\n\n  ContentEditable.prototype.componentDidUpdate = function () {\n    if (!this.el) {\n      return;\n    }\n\n    if (this.props.value !== this.el.innerHTML) {\n      this.previousValue = this.props.value;\n      this.el.innerHTML = this.props.value;\n    }\n\n    replaceCaret(this.el);\n  };\n\n  ContentEditable.prototype.setElementRef = function (el) {\n    var contentEditableRef = this.props.contentEditableRef;\n    this.el = el;\n    contentEditableRef && contentEditableRef(el);\n  };\n\n  ContentEditable.prototype.onChange = function (event) {\n    if (!this.el) {\n      return;\n    }\n\n    var value = this.el.innerHTML;\n    var previous = this.previousValue;\n    this.previousValue = value;\n\n    if (this.props.onChange && value !== previous) {\n      this.props.onChange(tslib_1.__assign({}, event, {\n        target: {\n          value: value\n        }\n      }));\n    }\n  };\n\n  ContentEditable.prototype.render = function () {\n    var _a = this.props,\n        contentEditableRef = _a.contentEditableRef,\n        tagName = _a.tagName,\n        value = _a.value,\n        props = tslib_1.__rest(_a, [\"contentEditableRef\", \"tagName\", \"value\"]);\n\n    return createElement(tagName || 'div', tslib_1.__assign({}, props, {\n      contentEditable: !this.props.disabled,\n      dangerouslySetInnerHTML: {\n        __html: value\n      },\n      onBlur: this.props.onBlur || this.onChange,\n      onInput: this.onChange,\n      onKeyDown: this.props.onKeyDown || this.onChange,\n      onKeyUp: this.props.onKeyUp || this.onChange,\n      ref: this.setElementRef\n    }));\n  };\n\n  return ContentEditable;\n}(Component);\n\nexport default ContentEditable;","map":null,"metadata":{},"sourceType":"module"}