{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { useState } from 'react';\nimport * as React from 'react';\nimport { withEditorContext } from '../Editor';\nimport OrderedListIcon from './icons/OrderedListIcon';\nimport UnorderedListIcon from './icons/UnorderedListIcon'; // tslint:disable:max-line-length\n\nexport var BtnBold = createButton('Bold', 'ùêÅ', 'bold');\nexport var BtnClearFormatting = createButton('Clear formatting', 'TÃ≤‚Çì', 'removeFormat');\nexport var BtnItalic = createButton('Italic', 'ùë∞', 'italic');\nexport var BtnLink = createButton('Link', 'üîó', function (selected) {\n  if (selected && selected.nodeName === 'A') {\n    document.execCommand('unlink');\n  } else {\n    document.execCommand('createLink', false, prompt('URL'));\n  }\n});\nexport var BtnNumberedList = createButton('Numbered list', React.createElement(OrderedListIcon, null), 'insertOrderedList');\nexport var BtnRedo = createButton('Redo', '‚Ü∑', 'redo');\nexport var BtnUnderline = createButton('Underline', React.createElement(\"span\", {\n  style: {\n    textDecoration: 'underline'\n  }\n}, \"\\uD835\\uDC14\"), 'underline');\nexport var BtnUndo = createButton('Undo', '‚Ü∂', 'undo');\nexport var BtnBulletList = createButton('Bullet list', React.createElement(UnorderedListIcon, null), 'insertUnorderedList');\nexport function Button(props) {\n  var _a = useState(false),\n      hovered = _a[0],\n      setHovered = _a[1];\n\n  var active = props.active,\n      styles = props.styles,\n      el = props.el,\n      selection = props.selection,\n      inputProps = tslib_1.__rest(props, [\"active\", \"styles\", \"el\", \"selection\"]);\n\n  var style = tslib_1.__assign({}, styles.button.normal, props.style, hovered ? styles.button.hovered : {}, hovered ? props.hoverStyle : {}, active ? styles.button.active : {});\n\n  var onHover = function (e) {\n    setHovered(true);\n    props.onMouseEnter && props.onMouseEnter(e);\n  };\n\n  var onUnHover = function (e) {\n    setHovered(false);\n    props.onMouseLeave && props.onMouseLeave(e);\n  };\n\n  return React.createElement(\"button\", tslib_1.__assign({}, inputProps, {\n    style: style,\n    onMouseEnter: onHover,\n    onMouseLeave: onUnHover\n  }));\n}\n\nfunction createButton(title, content, command) {\n  ButtonFactory.displayName = title.replace(/\\s/g, '');\n  return withEditorContext(ButtonFactory);\n\n  function ButtonFactory(props) {\n    var selection = props.selection,\n        buttonProps = tslib_1.__rest(props, [\"selection\"]);\n\n    var active = false;\n\n    if (typeof command === 'string') {\n      active = !!selection && document.queryCommandState(command);\n    }\n\n    return React.createElement(Button, tslib_1.__assign({\n      title: title\n    }, buttonProps, {\n      onMouseDown: action,\n      active: active\n    }), content);\n\n    function action() {\n      if (typeof command === 'function') {\n        command(selection);\n      } else {\n        document.execCommand(command);\n      }\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}