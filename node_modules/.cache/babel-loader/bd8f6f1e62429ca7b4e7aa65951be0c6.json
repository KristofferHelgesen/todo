{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { createContext, PureComponent } from 'react';\nimport * as React from 'react';\nimport ContentEditable from './ContentEditable';\nimport defaultStyles from './styles';\nimport { deepMerge, getSelectedNode } from './utils';\nexport var EditorContext = createContext({\n  styles: defaultStyles\n});\n\nvar Editor =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Editor, _super);\n\n  function Editor(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {};\n    _this.onClickOutside = _this.onClickOutside.bind(_this);\n    _this.onTextSelect = _this.onTextSelect.bind(_this);\n    _this.setContentEditableRef = _this.setContentEditableRef.bind(_this);\n    return _this;\n  }\n\n  Editor.prototype.componentDidMount = function () {\n    document.addEventListener('click', this.onClickOutside);\n  };\n\n  Editor.prototype.componentWillUnmount = function () {\n    document.removeEventListener('click', this.onClickOutside);\n  };\n\n  Editor.prototype.setContentEditableRef = function (el) {\n    this.setState({\n      contentEditable: el\n    });\n    this.props.contentEditableRef && this.props.contentEditableRef(el);\n  };\n\n  Editor.prototype.onClickOutside = function (event) {\n    var contentEditable = this.state.contentEditable;\n\n    if (event.target === contentEditable) {\n      return;\n    }\n\n    if (contentEditable && contentEditable.contains(event.target)) {\n      return;\n    }\n\n    this.setState({\n      selection: null\n    });\n  };\n\n  Editor.prototype.onTextSelect = function (e) {\n    this.props.onSelect && this.props.onSelect(e);\n    this.setState({\n      selection: getSelectedNode()\n    });\n  };\n\n  Editor.prototype.render = function () {\n    var _a = this.props,\n        children = _a.children,\n        styles = _a.styles,\n        props = tslib_1.__rest(_a, [\"children\", \"styles\"]);\n\n    var _b = this.state,\n        contentEditable = _b.contentEditable,\n        selection = _b.selection;\n    var allStyles = deepMerge({}, defaultStyles, styles);\n    var context = {\n      el: contentEditable,\n      selection: selection,\n      styles: allStyles\n    };\n    return React.createElement(\"div\", {\n      style: context.styles.editor\n    }, React.createElement(EditorContext.Provider, {\n      value: context\n    }, children, React.createElement(ContentEditable, tslib_1.__assign({}, props, {\n      contentEditableRef: this.setContentEditableRef,\n      onSelect: this.onTextSelect,\n      style: allStyles.contentEditable\n    }))));\n  };\n\n  return Editor;\n}(PureComponent);\n\nexport default Editor;\nexport function withEditorContext(Component) {\n  WithEditorContext.displayName = \"withEditorContext(\" + (Component.displayName || Component.name) + \")\";\n  return WithEditorContext;\n\n  function WithEditorContext(props) {\n    return React.createElement(EditorContext.Consumer, null, function (context) {\n      return React.createElement(Component, tslib_1.__assign({}, props, {\n        el: context.el,\n        selection: context.selection,\n        styles: context.styles\n      }));\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}